name: CI/CD Pipeline

'on':
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  release:
    types:
      - published

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: 1.7.1

jobs:
  # 코드 품질 체크
  quality:
    runs-on: ubuntu-latest
    name: Code Quality

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{
            hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run Black
        run: poetry run black --check aegis_shared/

      - name: Run isort
        run: poetry run isort --check-only aegis_shared/

      - name: Run flake8
        run: poetry run flake8 aegis_shared/

      - name: Run mypy
        run: poetry run mypy aegis_shared/

      - name: Run bandit
        run: poetry run bandit -r aegis_shared/ -x aegis_shared/tests/

  # 테스트
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.11'
          - '3.12'

    name: Test Python ${{ matrix.python-version }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: '--health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5'
        ports:
          - '5432:5432'

      redis:
        image: redis:7-alpine
        options: '--health-cmd "redis-cli ping" --health-interval 10s --health-timeout
          5s --health-retries 5'
        ports:
          - '6379:6379'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{
            hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run tests
        run: poetry run pytest --cov=aegis_shared --cov-report=xml
          --cov-report=term-missing
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key-for-ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # 보안 체크
  security:
    runs-on: ubuntu-latest
    name: Security Check

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run Safety
        run: poetry run safety check

      - name: Run Bandit
        run: poetry run bandit -r aegis_shared/ -x aegis_shared/tests/

  # 빌드
  build:
    runs-on: ubuntu-latest
    name: Build Package
    needs:
      - quality
      - test
      - security

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Build package
        run: poetry build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  # 배포 (릴리스 시에만)
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to PyPI
    needs:
      - build
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish

  # 테스트 배포 (develop 브랜치)
  deploy-test:
    runs-on: ubuntu-latest
    name: Deploy to Test PyPI
    needs:
      - build
    if: github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to Test PyPI
        env:
          POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry publish --repository testpypi

  # Private PyPI 배포 (main 브랜치)
  deploy-private:
    runs-on: ubuntu-latest
    name: Deploy to Private PyPI
    needs:
      - build
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Configure Private PyPI
        env:
          PRIVATE_PYPI_URL: ${{ secrets.PRIVATE_PYPI_URL }}
          PRIVATE_PYPI_USERNAME: ${{ secrets.PRIVATE_PYPI_USERNAME }}
          PRIVATE_PYPI_PASSWORD: ${{ secrets.PRIVATE_PYPI_PASSWORD }}
        run: |
          poetry config repositories.private-pypi "$PRIVATE_PYPI_URL/simple/"
          poetry config http-basic.private-pypi "$PRIVATE_PYPI_USERNAME" "$PRIVATE_PYPI_PASSWORD"

      - name: Publish to Private PyPI
        run: poetry publish --repository private-pypi

  # 자동 버전 관리 및 릴리스 (태그 푸시 시)
  auto-release:
    runs-on: ubuntu-latest
    name: Auto Release
    needs:
      - build
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 필요

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## Changes in ${{ steps.version.outputs.VERSION }}
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
            
            ## Installation
            
            ### From Private PyPI
            ```bash
            pip install aegis-shared==${{ steps.version.outputs.VERSION }} --extra-index-url ${{ secrets.PRIVATE_PYPI_URL }}/simple/
            ```
            
            ### From Public PyPI
            ```bash
            pip install aegis-shared==${{ steps.version.outputs.VERSION }}
            ```
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}