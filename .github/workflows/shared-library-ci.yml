name: Aegis Shared Library CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'aegis_shared/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'requirements.txt'
      - 'requirements-dev.txt'
      - '.github/workflows/shared-library-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'aegis_shared/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'requirements.txt'
      - 'requirements-dev.txt'
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --with dev
    
    - name: Install project
      run: poetry install --no-interaction --with dev
    
    - name: Install system dependencies for libmagic
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1
    
    - name: Verify installation
      run: |
        poetry run python --version
        poetry run pytest --version
        poetry show
    
    - name: Run all tests with coverage
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key-for-ci
        JWT_ALGORITHM: HS256
        ENVIRONMENT: test
      run: |
        poetry run pytest aegis_shared/tests/ -v --cov=aegis_shared --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Check coverage threshold
      run: |
        poetry run coverage report --fail-under=80
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: shared-library
        name: aegis-shared-library
        fail_ci_if_error: false
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml
          .coverage

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      run: poetry install --no-interaction --with dev
    
    - name: Run Black (code formatting check)
      run: poetry run black --check aegis_shared/
      continue-on-error: true
    
    - name: Run isort (import sorting check)
      run: poetry run isort --check-only aegis_shared/
      continue-on-error: true
    
    - name: Run Flake8 (linting)
      run: |
        poetry run flake8 aegis_shared/ --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 aegis_shared/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
      continue-on-error: true
    
    - name: Run MyPy (type checking)
      run: poetry run mypy aegis_shared/ --ignore-missing-imports
      continue-on-error: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Build package
      run: poetry build
    
    - name: Check package
      run: |
        poetry run pip install twine
        poetry run twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      run: poetry install --no-interaction --with dev
    
    - name: Run Bandit (security linting)
      run: poetry run bandit -r aegis_shared/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety (dependency vulnerability check)
      run: poetry run safety check --json
      continue-on-error: true
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          trivy-results.sarif

  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [test, build, code-quality, security-scan]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Configure Poetry for private PyPI (if configured)
      if: ${{ secrets.PRIVATE_PYPI_URL != '' }}
      run: |
        poetry config repositories.private ${{ secrets.PRIVATE_PYPI_URL }}
        poetry config http-basic.private ${{ secrets.PRIVATE_PYPI_USERNAME }} ${{ secrets.PRIVATE_PYPI_PASSWORD }}
    
    - name: Publish to private PyPI
      if: ${{ secrets.PRIVATE_PYPI_URL != '' }}
      run: poetry publish --repository private
    
    - name: Create release notes
      run: |
        echo "# Aegis Shared Library Release" > release-notes.md
        echo "" >> release-notes.md
        echo "**Version:** $(poetry version -s)" >> release-notes.md
        echo "**Build Date:** $(date)" >> release-notes.md
        echo "**Git Commit:** ${{ github.sha }}" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Installation" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "poetry add aegis-shared@$(poetry version -s)" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
          release-notes.md
        body_path: release-notes.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [test, build, code-quality, security-scan]
    if: always()
    
    steps:
    - name: Prepare notification message
      id: message
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ Aegis Shared Library CI/CD completed successfully!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Aegis Shared Library CI/CD failed!" >> $GITHUB_OUTPUT
        fi
    
    - name: Notify Slack (if webhook configured)
      if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.message.outputs.status }}
        text: ${{ steps.message.outputs.message }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}