name: User Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'user-service/**'
      - '.github/workflows/user-service-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'user-service/**'

env:
  PYTHON_VERSION: "3.11"
  SERVICE_NAME: "user-service"

jobs:
  test:
    name: Test User Service
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: user_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: ./user-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      working-directory: ./user-service
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      working-directory: ./user-service
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/user_db
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-secret-key
      run: |
        pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./user-service/coverage.xml
        flags: user-service

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      working-directory: ./user-service
      run: |
        docker build -t ${{ env.SERVICE_NAME }}:${{ github.sha }} .
    
    - name: Save Docker image
      run: |
        docker save ${{ env.SERVICE_NAME }}:${{ github.sha }} | gzip > ${{ env.SERVICE_NAME }}.tar.gz
    
    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: ${{ env.SERVICE_NAME }}.tar.gz

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying ${{ env.SERVICE_NAME }} to staging environment"
        # 실제 배포 로직은 환경에 따라 구현