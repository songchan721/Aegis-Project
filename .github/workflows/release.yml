name: Release Management

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Configure Git
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
    
    - name: Bump version
      id: version
      run: |
        # Get current version
        CURRENT_VERSION=$(poetry version -s)
        echo "Current version: $CURRENT_VERSION"
        
        # Bump version based on input
        poetry version ${{ github.event.inputs.version_bump }}
        NEW_VERSION=$(poetry version -s)
        echo "New version: $NEW_VERSION"
        
        # Export version for later steps
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update CHANGELOG
      run: |
        VERSION="${{ steps.version.outputs.new_version }}"
        DATE=$(date +%Y-%m-%d)
        
        # Create changelog entry
        cat > changelog_entry.md << EOF
        ## [$VERSION] - $DATE
        
        ### Changed
        - Version bump from ${{ steps.version.outputs.current_version }} to $VERSION
        
        ### For detailed changes, see commit history
        
        EOF
        
        # Prepend to CHANGELOG.md
        if [ -f CHANGELOG.md ]; then
          cat changelog_entry.md CHANGELOG.md > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md
        else
          mv changelog_entry.md CHANGELOG.md
        fi
    
    - name: Commit version bump
      run: |
        git add pyproject.toml CHANGELOG.md
        git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
        git push origin main
    
    - name: Create Git tag
      run: |
        VERSION="${{ steps.version.outputs.new_version }}"
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"
    
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.new_version }}"
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" HEAD)
        else
          COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        # Aegis Shared Library v$VERSION
        
        ## ðŸš€ What's Changed
        
        $COMMITS
        
        ## ðŸ“¦ Installation
        
        \`\`\`bash
        # Using Poetry
        poetry add aegis-shared@$VERSION
        
        # Using pip
        pip install aegis-shared==$VERSION
        \`\`\`
        
        ## ðŸ“Š Test Coverage
        
        - âœ… 252 tests passed
        - ðŸ“ˆ 80%+ code coverage
        - ðŸ”’ Security scans passed
        
        ## ðŸ”— Links
        
        - [Documentation](https://github.com/${{ github.repository }}/tree/v$VERSION/docs)
        - [Changelog](https://github.com/${{ github.repository }}/blob/v$VERSION/CHANGELOG.md)
        
        ---
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v$VERSION
        EOF
        
        # Read release notes for output
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.new_version }}
        name: Release v${{ steps.version.outputs.new_version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Notify success
      if: success()
      run: |
        echo "âœ… Release v${{ steps.version.outputs.new_version }} created successfully!"
        echo "ðŸ”— https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.new_version }}"
